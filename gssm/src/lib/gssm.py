# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_gssm', [dirname(__file__)])
        except ImportError:
            import _gssm
            return _gssm
        if fp is not None:
            try:
                _mod = imp.load_module('_gssm', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _gssm = swig_import_helper()
    del swig_import_helper
else:
    import _gssm
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class gssm_sink_sptr(_object):
    """Proxy of C++ boost::shared_ptr<(gssm_sink)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gssm_sink_sptr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gssm_sink_sptr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gssm_sink_sptr
        __init__(self,  p) -> gssm_sink_sptr
        """
        this = _gssm.new_gssm_sink_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gssm.gssm_sink_sptr___deref__(self)

    __swig_destroy__ = _gssm.delete_gssm_sink_sptr
    __del__ = lambda self : None;
    __swig_setmethods__["d_search_fc_count"] = _gssm.gssm_sink_sptr_d_search_fc_count_set
    __swig_getmethods__["d_search_fc_count"] = _gssm.gssm_sink_sptr_d_search_fc_count_get
    if _newclass:d_search_fc_count = _swig_property(_gssm.gssm_sink_sptr_d_search_fc_count_get, _gssm.gssm_sink_sptr_d_search_fc_count_set)
    __swig_setmethods__["d_found_fc_count"] = _gssm.gssm_sink_sptr_d_found_fc_count_set
    __swig_getmethods__["d_found_fc_count"] = _gssm.gssm_sink_sptr_d_found_fc_count_get
    if _newclass:d_found_fc_count = _swig_property(_gssm.gssm_sink_sptr_d_found_fc_count_get, _gssm.gssm_sink_sptr_d_found_fc_count_set)
    __swig_setmethods__["d_valid_s"] = _gssm.gssm_sink_sptr_d_valid_s_set
    __swig_getmethods__["d_valid_s"] = _gssm.gssm_sink_sptr_d_valid_s_get
    if _newclass:d_valid_s = _swig_property(_gssm.gssm_sink_sptr_d_valid_s_get, _gssm.gssm_sink_sptr_d_valid_s_set)
    __swig_setmethods__["d_invalid_s"] = _gssm.gssm_sink_sptr_d_invalid_s_set
    __swig_getmethods__["d_invalid_s"] = _gssm.gssm_sink_sptr_d_invalid_s_get
    if _newclass:d_invalid_s = _swig_property(_gssm.gssm_sink_sptr_d_invalid_s_get, _gssm.gssm_sink_sptr_d_invalid_s_set)
    def stats(self):
        """stats(self)"""
        return _gssm.gssm_sink_sptr_stats(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _gssm.gssm_sink_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gssm.gssm_sink_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gssm.gssm_sink_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gssm.gssm_sink_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gssm.gssm_sink_sptr_stop(self)

    def nitems_read(self, *args):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gssm.gssm_sink_sptr_nitems_read(self, *args)

    def nitems_written(self, *args):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gssm.gssm_sink_sptr_nitems_written(self, *args)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gssm.gssm_sink_sptr_detail(self)

    def set_detail(self, *args):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gssm.gssm_sink_sptr_set_detail(self, *args)

    def name(self):
        """name(self) -> string"""
        return _gssm.gssm_sink_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gssm.gssm_sink_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gssm.gssm_sink_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gssm.gssm_sink_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gssm.gssm_sink_sptr_to_basic_block(self)

    def check_topology(self, *args):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gssm.gssm_sink_sptr_check_topology(self, *args)

gssm_sink_sptr_swigregister = _gssm.gssm_sink_sptr_swigregister
gssm_sink_sptr_swigregister(gssm_sink_sptr)

gssm_sink_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def sink(*args):
  """sink(double arg0) -> gssm_sink_sptr"""
  return _gssm.sink(*args)


