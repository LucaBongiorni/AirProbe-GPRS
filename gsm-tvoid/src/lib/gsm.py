# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_gsm', [dirname(__file__)])
        except ImportError:
            import _gsm
            return _gsm
        if fp is not None:
            try:
                _mod = imp.load_module('_gsm', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _gsm = swig_import_helper()
    del swig_import_helper
else:
    import _gsm
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


OPT_TEST_HOP_SPEED = _gsm.OPT_TEST_HOP_SPEED
PRINT_NOTHING = _gsm.PRINT_NOTHING
PRINT_EVERYTHING = _gsm.PRINT_EVERYTHING
PRINT_BITS = _gsm.PRINT_BITS
PRINT_ALL_BITS = _gsm.PRINT_ALL_BITS
PRINT_CORR_BITS = _gsm.PRINT_CORR_BITS
PRINT_STATE = _gsm.PRINT_STATE
PRINT_ALL_TYPES = _gsm.PRINT_ALL_TYPES
PRINT_KNOWN = _gsm.PRINT_KNOWN
PRINT_UNKNOWN = _gsm.PRINT_UNKNOWN
PRINT_TS0 = _gsm.PRINT_TS0
PRINT_FCCH = _gsm.PRINT_FCCH
PRINT_SCH = _gsm.PRINT_SCH
PRINT_DUMMY = _gsm.PRINT_DUMMY
PRINT_NORMAL = _gsm.PRINT_NORMAL
PRINT_GSM_DECODE = _gsm.PRINT_GSM_DECODE
PRINT_HEX = _gsm.PRINT_HEX
QB_NONE = _gsm.QB_NONE
QB_QUARTER = _gsm.QB_QUARTER
QB_FULL04 = _gsm.QB_FULL04
QB_MASK = _gsm.QB_MASK
CLK_CORR_TRACK = _gsm.CLK_CORR_TRACK
BURST_CB_SYNC_OFFSET = _gsm.BURST_CB_SYNC_OFFSET
BURST_CB_ADJ_OFFSET = _gsm.BURST_CB_ADJ_OFFSET
BURST_CB_TUNE = _gsm.BURST_CB_TUNE
EQ_NONE = _gsm.EQ_NONE
EQ_FIXED_LINEAR = _gsm.EQ_FIXED_LINEAR
EQ_ADAPTIVE_LINEAR = _gsm.EQ_ADAPTIVE_LINEAR
EQ_FIXED_DFE = _gsm.EQ_FIXED_DFE
EQ_ADAPTIVE_DFE = _gsm.EQ_ADAPTIVE_DFE
EQ_VITERBI = _gsm.EQ_VITERBI
class gsm_burst(object):
    """Proxy of C++ gsm_burst class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gsm.delete_gsm_burst
    __del__ = lambda self : None;
    d_clock_options = _swig_property(_gsm.gsm_burst_d_clock_options_get, _gsm.gsm_burst_d_clock_options_set)
    d_print_options = _swig_property(_gsm.gsm_burst_d_print_options_get, _gsm.gsm_burst_d_print_options_set)
    d_test_options = _swig_property(_gsm.gsm_burst_d_test_options_get, _gsm.gsm_burst_d_test_options_set)
    d_equalizer_type = _swig_property(_gsm.gsm_burst_d_equalizer_type_get, _gsm.gsm_burst_d_equalizer_type_set)
    d_sync_loss_count = _swig_property(_gsm.gsm_burst_d_sync_loss_count_get, _gsm.gsm_burst_d_sync_loss_count_set)
    d_fcch_count = _swig_property(_gsm.gsm_burst_d_fcch_count_get, _gsm.gsm_burst_d_fcch_count_set)
    d_part_sch_count = _swig_property(_gsm.gsm_burst_d_part_sch_count_get, _gsm.gsm_burst_d_part_sch_count_set)
    d_sch_count = _swig_property(_gsm.gsm_burst_d_sch_count_get, _gsm.gsm_burst_d_sch_count_set)
    d_normal_count = _swig_property(_gsm.gsm_burst_d_normal_count_get, _gsm.gsm_burst_d_normal_count_set)
    d_dummy_count = _swig_property(_gsm.gsm_burst_d_dummy_count_get, _gsm.gsm_burst_d_dummy_count_set)
    d_unknown_count = _swig_property(_gsm.gsm_burst_d_unknown_count_get, _gsm.gsm_burst_d_unknown_count_set)
    d_total_count = _swig_property(_gsm.gsm_burst_d_total_count_get, _gsm.gsm_burst_d_total_count_set)
    next_arfcn = _swig_property(_gsm.gsm_burst_next_arfcn_get, _gsm.gsm_burst_next_arfcn_set)
    d_hop_good_arfcn = _swig_property(_gsm.gsm_burst_d_hop_good_arfcn_get, _gsm.gsm_burst_d_hop_good_arfcn_set)
    d_hop_bad_arfcn = _swig_property(_gsm.gsm_burst_d_hop_bad_arfcn_get, _gsm.gsm_burst_d_hop_bad_arfcn_set)
    def sync_state(self):
        """sync_state(self) -> int"""
        return _gsm.gsm_burst_sync_state(self)

    def last_freq_offset(self):
        """last_freq_offset(self) -> float"""
        return _gsm.gsm_burst_last_freq_offset(self)

    def mean_freq_offset(self):
        """mean_freq_offset(self) -> float"""
        return _gsm.gsm_burst_mean_freq_offset(self)

    def full_reset(self):
        """full_reset(self)"""
        return _gsm.gsm_burst_full_reset(self)

gsm_burst_swigregister = _gsm.gsm_burst_swigregister
gsm_burst_swigregister(gsm_burst)

class gsm_burst_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gsm_burst_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gsm_burst_ff_sptr
        __init__(self,  p) -> gsm_burst_ff_sptr
        """
        this = _gsm.new_gsm_burst_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gsm.gsm_burst_ff_sptr___deref__(self)

    __swig_destroy__ = _gsm.delete_gsm_burst_ff_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gsm.gsm_burst_ff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gsm.gsm_burst_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gsm.gsm_burst_ff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gsm.gsm_burst_ff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gsm.gsm_burst_ff_sptr_stop(self)

    def nitems_read(self, *args):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gsm.gsm_burst_ff_sptr_nitems_read(self, *args)

    def nitems_written(self, *args):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gsm.gsm_burst_ff_sptr_nitems_written(self, *args)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gsm.gsm_burst_ff_sptr_detail(self)

    def set_detail(self, *args):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gsm.gsm_burst_ff_sptr_set_detail(self, *args)

    def name(self):
        """name(self) -> string"""
        return _gsm.gsm_burst_ff_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gsm.gsm_burst_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gsm.gsm_burst_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gsm.gsm_burst_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gsm.gsm_burst_ff_sptr_to_basic_block(self)

    def check_topology(self, *args):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gsm.gsm_burst_ff_sptr_check_topology(self, *args)

    d_clock_options = _swig_property(_gsm.gsm_burst_ff_sptr_d_clock_options_get, _gsm.gsm_burst_ff_sptr_d_clock_options_set)
    d_print_options = _swig_property(_gsm.gsm_burst_ff_sptr_d_print_options_get, _gsm.gsm_burst_ff_sptr_d_print_options_set)
    d_test_options = _swig_property(_gsm.gsm_burst_ff_sptr_d_test_options_get, _gsm.gsm_burst_ff_sptr_d_test_options_set)
    d_equalizer_type = _swig_property(_gsm.gsm_burst_ff_sptr_d_equalizer_type_get, _gsm.gsm_burst_ff_sptr_d_equalizer_type_set)
    d_sync_loss_count = _swig_property(_gsm.gsm_burst_ff_sptr_d_sync_loss_count_get, _gsm.gsm_burst_ff_sptr_d_sync_loss_count_set)
    d_fcch_count = _swig_property(_gsm.gsm_burst_ff_sptr_d_fcch_count_get, _gsm.gsm_burst_ff_sptr_d_fcch_count_set)
    d_part_sch_count = _swig_property(_gsm.gsm_burst_ff_sptr_d_part_sch_count_get, _gsm.gsm_burst_ff_sptr_d_part_sch_count_set)
    d_sch_count = _swig_property(_gsm.gsm_burst_ff_sptr_d_sch_count_get, _gsm.gsm_burst_ff_sptr_d_sch_count_set)
    d_normal_count = _swig_property(_gsm.gsm_burst_ff_sptr_d_normal_count_get, _gsm.gsm_burst_ff_sptr_d_normal_count_set)
    d_dummy_count = _swig_property(_gsm.gsm_burst_ff_sptr_d_dummy_count_get, _gsm.gsm_burst_ff_sptr_d_dummy_count_set)
    d_unknown_count = _swig_property(_gsm.gsm_burst_ff_sptr_d_unknown_count_get, _gsm.gsm_burst_ff_sptr_d_unknown_count_set)
    d_total_count = _swig_property(_gsm.gsm_burst_ff_sptr_d_total_count_get, _gsm.gsm_burst_ff_sptr_d_total_count_set)
    next_arfcn = _swig_property(_gsm.gsm_burst_ff_sptr_next_arfcn_get, _gsm.gsm_burst_ff_sptr_next_arfcn_set)
    d_hop_good_arfcn = _swig_property(_gsm.gsm_burst_ff_sptr_d_hop_good_arfcn_get, _gsm.gsm_burst_ff_sptr_d_hop_good_arfcn_set)
    d_hop_bad_arfcn = _swig_property(_gsm.gsm_burst_ff_sptr_d_hop_bad_arfcn_get, _gsm.gsm_burst_ff_sptr_d_hop_bad_arfcn_set)
    def sync_state(self):
        """sync_state(self) -> int"""
        return _gsm.gsm_burst_ff_sptr_sync_state(self)

    def last_freq_offset(self):
        """last_freq_offset(self) -> float"""
        return _gsm.gsm_burst_ff_sptr_last_freq_offset(self)

    def mean_freq_offset(self):
        """mean_freq_offset(self) -> float"""
        return _gsm.gsm_burst_ff_sptr_mean_freq_offset(self)

    def full_reset(self):
        """full_reset(self)"""
        return _gsm.gsm_burst_ff_sptr_full_reset(self)

gsm_burst_ff_sptr_swigregister = _gsm.gsm_burst_ff_sptr_swigregister
gsm_burst_ff_sptr_swigregister(gsm_burst_ff_sptr)

gsm_burst_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def burst_ff(*args):
  """burst_ff(gr_feval_ll arg0) -> gsm_burst_ff_sptr"""
  return _gsm.burst_ff(*args)
class gsm_burst_cf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gsm_burst_cf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gsm_burst_cf_sptr
        __init__(self,  p) -> gsm_burst_cf_sptr
        """
        this = _gsm.new_gsm_burst_cf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gsm.gsm_burst_cf_sptr___deref__(self)

    __swig_destroy__ = _gsm.delete_gsm_burst_cf_sptr
    __del__ = lambda self : None;
    def get_omega(self):
        """get_omega(self) -> float"""
        return _gsm.gsm_burst_cf_sptr_get_omega(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _gsm.gsm_burst_cf_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gsm.gsm_burst_cf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gsm.gsm_burst_cf_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gsm.gsm_burst_cf_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gsm.gsm_burst_cf_sptr_stop(self)

    def nitems_read(self, *args):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gsm.gsm_burst_cf_sptr_nitems_read(self, *args)

    def nitems_written(self, *args):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gsm.gsm_burst_cf_sptr_nitems_written(self, *args)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gsm.gsm_burst_cf_sptr_detail(self)

    def set_detail(self, *args):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gsm.gsm_burst_cf_sptr_set_detail(self, *args)

    def name(self):
        """name(self) -> string"""
        return _gsm.gsm_burst_cf_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gsm.gsm_burst_cf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gsm.gsm_burst_cf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gsm.gsm_burst_cf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gsm.gsm_burst_cf_sptr_to_basic_block(self)

    def check_topology(self, *args):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gsm.gsm_burst_cf_sptr_check_topology(self, *args)

    d_clock_options = _swig_property(_gsm.gsm_burst_cf_sptr_d_clock_options_get, _gsm.gsm_burst_cf_sptr_d_clock_options_set)
    d_print_options = _swig_property(_gsm.gsm_burst_cf_sptr_d_print_options_get, _gsm.gsm_burst_cf_sptr_d_print_options_set)
    d_test_options = _swig_property(_gsm.gsm_burst_cf_sptr_d_test_options_get, _gsm.gsm_burst_cf_sptr_d_test_options_set)
    d_equalizer_type = _swig_property(_gsm.gsm_burst_cf_sptr_d_equalizer_type_get, _gsm.gsm_burst_cf_sptr_d_equalizer_type_set)
    d_sync_loss_count = _swig_property(_gsm.gsm_burst_cf_sptr_d_sync_loss_count_get, _gsm.gsm_burst_cf_sptr_d_sync_loss_count_set)
    d_fcch_count = _swig_property(_gsm.gsm_burst_cf_sptr_d_fcch_count_get, _gsm.gsm_burst_cf_sptr_d_fcch_count_set)
    d_part_sch_count = _swig_property(_gsm.gsm_burst_cf_sptr_d_part_sch_count_get, _gsm.gsm_burst_cf_sptr_d_part_sch_count_set)
    d_sch_count = _swig_property(_gsm.gsm_burst_cf_sptr_d_sch_count_get, _gsm.gsm_burst_cf_sptr_d_sch_count_set)
    d_normal_count = _swig_property(_gsm.gsm_burst_cf_sptr_d_normal_count_get, _gsm.gsm_burst_cf_sptr_d_normal_count_set)
    d_dummy_count = _swig_property(_gsm.gsm_burst_cf_sptr_d_dummy_count_get, _gsm.gsm_burst_cf_sptr_d_dummy_count_set)
    d_unknown_count = _swig_property(_gsm.gsm_burst_cf_sptr_d_unknown_count_get, _gsm.gsm_burst_cf_sptr_d_unknown_count_set)
    d_total_count = _swig_property(_gsm.gsm_burst_cf_sptr_d_total_count_get, _gsm.gsm_burst_cf_sptr_d_total_count_set)
    next_arfcn = _swig_property(_gsm.gsm_burst_cf_sptr_next_arfcn_get, _gsm.gsm_burst_cf_sptr_next_arfcn_set)
    d_hop_good_arfcn = _swig_property(_gsm.gsm_burst_cf_sptr_d_hop_good_arfcn_get, _gsm.gsm_burst_cf_sptr_d_hop_good_arfcn_set)
    d_hop_bad_arfcn = _swig_property(_gsm.gsm_burst_cf_sptr_d_hop_bad_arfcn_get, _gsm.gsm_burst_cf_sptr_d_hop_bad_arfcn_set)
    def sync_state(self):
        """sync_state(self) -> int"""
        return _gsm.gsm_burst_cf_sptr_sync_state(self)

    def last_freq_offset(self):
        """last_freq_offset(self) -> float"""
        return _gsm.gsm_burst_cf_sptr_last_freq_offset(self)

    def mean_freq_offset(self):
        """mean_freq_offset(self) -> float"""
        return _gsm.gsm_burst_cf_sptr_mean_freq_offset(self)

    def full_reset(self):
        """full_reset(self)"""
        return _gsm.gsm_burst_cf_sptr_full_reset(self)

gsm_burst_cf_sptr_swigregister = _gsm.gsm_burst_cf_sptr_swigregister
gsm_burst_cf_sptr_swigregister(gsm_burst_cf_sptr)

gsm_burst_cf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def burst_cf(*args):
  """burst_cf(gr_feval_ll arg0, float arg1) -> gsm_burst_cf_sptr"""
  return _gsm.burst_cf(*args)
class gsm_burst_sink_c_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gsm_burst_sink_c)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gsm_burst_sink_c_sptr
        __init__(self,  p) -> gsm_burst_sink_c_sptr
        """
        this = _gsm.new_gsm_burst_sink_c_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gsm.gsm_burst_sink_c_sptr___deref__(self)

    __swig_destroy__ = _gsm.delete_gsm_burst_sink_c_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gsm.gsm_burst_sink_c_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gsm.gsm_burst_sink_c_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gsm.gsm_burst_sink_c_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gsm.gsm_burst_sink_c_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gsm.gsm_burst_sink_c_sptr_stop(self)

    def nitems_read(self, *args):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gsm.gsm_burst_sink_c_sptr_nitems_read(self, *args)

    def nitems_written(self, *args):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gsm.gsm_burst_sink_c_sptr_nitems_written(self, *args)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gsm.gsm_burst_sink_c_sptr_detail(self)

    def set_detail(self, *args):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gsm.gsm_burst_sink_c_sptr_set_detail(self, *args)

    def name(self):
        """name(self) -> string"""
        return _gsm.gsm_burst_sink_c_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gsm.gsm_burst_sink_c_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gsm.gsm_burst_sink_c_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gsm.gsm_burst_sink_c_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gsm.gsm_burst_sink_c_sptr_to_basic_block(self)

    def check_topology(self, *args):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gsm.gsm_burst_sink_c_sptr_check_topology(self, *args)

    d_clock_options = _swig_property(_gsm.gsm_burst_sink_c_sptr_d_clock_options_get, _gsm.gsm_burst_sink_c_sptr_d_clock_options_set)
    d_print_options = _swig_property(_gsm.gsm_burst_sink_c_sptr_d_print_options_get, _gsm.gsm_burst_sink_c_sptr_d_print_options_set)
    d_test_options = _swig_property(_gsm.gsm_burst_sink_c_sptr_d_test_options_get, _gsm.gsm_burst_sink_c_sptr_d_test_options_set)
    d_equalizer_type = _swig_property(_gsm.gsm_burst_sink_c_sptr_d_equalizer_type_get, _gsm.gsm_burst_sink_c_sptr_d_equalizer_type_set)
    d_sync_loss_count = _swig_property(_gsm.gsm_burst_sink_c_sptr_d_sync_loss_count_get, _gsm.gsm_burst_sink_c_sptr_d_sync_loss_count_set)
    d_fcch_count = _swig_property(_gsm.gsm_burst_sink_c_sptr_d_fcch_count_get, _gsm.gsm_burst_sink_c_sptr_d_fcch_count_set)
    d_part_sch_count = _swig_property(_gsm.gsm_burst_sink_c_sptr_d_part_sch_count_get, _gsm.gsm_burst_sink_c_sptr_d_part_sch_count_set)
    d_sch_count = _swig_property(_gsm.gsm_burst_sink_c_sptr_d_sch_count_get, _gsm.gsm_burst_sink_c_sptr_d_sch_count_set)
    d_normal_count = _swig_property(_gsm.gsm_burst_sink_c_sptr_d_normal_count_get, _gsm.gsm_burst_sink_c_sptr_d_normal_count_set)
    d_dummy_count = _swig_property(_gsm.gsm_burst_sink_c_sptr_d_dummy_count_get, _gsm.gsm_burst_sink_c_sptr_d_dummy_count_set)
    d_unknown_count = _swig_property(_gsm.gsm_burst_sink_c_sptr_d_unknown_count_get, _gsm.gsm_burst_sink_c_sptr_d_unknown_count_set)
    d_total_count = _swig_property(_gsm.gsm_burst_sink_c_sptr_d_total_count_get, _gsm.gsm_burst_sink_c_sptr_d_total_count_set)
    next_arfcn = _swig_property(_gsm.gsm_burst_sink_c_sptr_next_arfcn_get, _gsm.gsm_burst_sink_c_sptr_next_arfcn_set)
    d_hop_good_arfcn = _swig_property(_gsm.gsm_burst_sink_c_sptr_d_hop_good_arfcn_get, _gsm.gsm_burst_sink_c_sptr_d_hop_good_arfcn_set)
    d_hop_bad_arfcn = _swig_property(_gsm.gsm_burst_sink_c_sptr_d_hop_bad_arfcn_get, _gsm.gsm_burst_sink_c_sptr_d_hop_bad_arfcn_set)
    def sync_state(self):
        """sync_state(self) -> int"""
        return _gsm.gsm_burst_sink_c_sptr_sync_state(self)

    def last_freq_offset(self):
        """last_freq_offset(self) -> float"""
        return _gsm.gsm_burst_sink_c_sptr_last_freq_offset(self)

    def mean_freq_offset(self):
        """mean_freq_offset(self) -> float"""
        return _gsm.gsm_burst_sink_c_sptr_mean_freq_offset(self)

    def full_reset(self):
        """full_reset(self)"""
        return _gsm.gsm_burst_sink_c_sptr_full_reset(self)

gsm_burst_sink_c_sptr_swigregister = _gsm.gsm_burst_sink_c_sptr_swigregister
gsm_burst_sink_c_sptr_swigregister(gsm_burst_sink_c_sptr)

gsm_burst_sink_c_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def burst_sink_c(*args):
  """burst_sink_c(gr_feval_ll arg0, float arg1) -> gsm_burst_sink_c_sptr"""
  return _gsm.burst_sink_c(*args)


